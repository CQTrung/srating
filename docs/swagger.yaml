definitions:
  domain.CreateUserRequest:
    properties:
      department_id:
        type: integer
      email:
        type: string
      field:
        type: string
      full_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      short_name:
        type: string
      status:
        $ref: '#/definitions/domain.Status'
      username:
        type: string
    type: object
  domain.Department:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/domain.User'
        type: array
    type: object
  domain.Feedback:
    properties:
      created_at:
        type: string
      id:
        type: integer
      level:
        $ref: '#/definitions/domain.Level'
      note:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    required:
    - level
    - user_id
    type: object
  domain.Level:
    enum:
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-varnames:
    - VeryGood
    - Good
    - Normal
    - Bad
  domain.LoginRequest:
    properties:
      is_remember_me:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  domain.LoginResponse:
    properties:
      access_token:
        type: string
      department:
        $ref: '#/definitions/domain.Department'
      email:
        type: string
      field:
        type: string
      full_name:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/domain.Media'
      phone:
        type: string
      refresh_token:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      short_name:
        type: string
      status:
        $ref: '#/definitions/domain.Status'
      username:
        type: string
    type: object
  domain.Media:
    properties:
      created_at:
        type: string
      filename:
        description: Type     string `gorm:"column:type" json:"type"`
        type: string
      id:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  domain.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  domain.RefreshTokenResponse:
    properties:
      access_token:
        type: string
    type: object
  domain.Role:
    enum:
    - employee
    - admin
    - manager
    type: string
    x-enum-varnames:
    - EmployeeRole
    - AdminRole
    - ManagerRole
  domain.Status:
    enum:
    - 1
    - 0
    type: integer
    x-enum-varnames:
    - ActiveStatus
    - InActiveStatus
  domain.UpdateUserRequest:
    properties:
      department_id:
        type: integer
      email:
        type: string
      field:
        type: string
      full_name:
        type: string
      id:
        type: integer
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      short_name:
        type: string
      status:
        $ref: '#/definitions/domain.Status'
      username:
        type: string
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      department:
        $ref: '#/definitions/domain.Department'
      department_id:
        type: integer
      email:
        type: string
      feedbacks:
        items:
          $ref: '#/definitions/domain.Feedback'
        type: array
      field:
        type: string
      full_name:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/domain.Media'
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      short_name:
        type: string
      status:
        $ref: '#/definitions/domain.Status'
      updated_at:
        type: string
      username:
        type: string
    required:
    - department_id
    - email
    - field
    - full_name
    - password
    - phone
    - short_name
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact: {}
paths:
  /auth/login:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoginResponse'
      summary: Login user
      tags:
      - auth
  /auth/refresh:
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.RefreshTokenRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RefreshTokenResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Register user
      tags:
      - auth
  /dashboard:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      tags:
      - dashboard
  /feedbacks:
    get:
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: page
        in: query
        name: page
        type: integer
      - description: user_id
        in: query
        name: user_id
        type: integer
      - description: level
        in: query
        name: level
        type: integer
      - description: start_date
        in: query
        name: start_date
        type: integer
      - description: end_date
        in: query
        name: end_date
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all feedback
      tags:
      - feedback
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.Feedback'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create feedback
      tags:
      - feedback
  /feedbacks/:id:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get feedback by detail
      tags:
      - feedback
  /feedbacks/search:
    post:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Search feedback
      tags:
      - feedback
  /media:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all media
      tags:
      - media
    post:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Upload media
      tags:
      - media
  /users:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get user detail
      tags:
      - user
    post:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserRequest'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create user by admin
      tags:
      - user
  /users/employees:
    get:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all employee
      tags:
      - user
    put:
      parameters:
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUserRequest'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update employee
      tags:
      - user
  /users/employees/:id:
    delete:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete employee
      tags:
      - user
  /users/status:
    put:
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Change status
      tags:
      - user
securityDefinitions:
  BearerAuth:
    type: basic
swagger: "2.0"
